S-> {Declaracao}* {Comandos}* EoF 
Declaracao -> Variaveis | Constantes 
 
VARIAVEIS -> {(int | char | boolean | real | string) id1 $10$ [ = [- $1$]  constante $3$ ] {,id2 $11$ [ = [- $4$] constante $5$] }* ;}
 
CONSTANTES -> {const id $6$ = [- $7$] constante$8$;} 
 
COMANDOS -> atribuicao, repeticao, condicional, nulo,leitura, escrita 
 
Comando de atribuicao -> id $9$ = Exp $2$; | id $12$ "["Exp $13$"]" = Exp $14$; 
 
Comando de repeticao -> while Exp $15$ (Comandos | Lista_Comandos) 
Comando condicional -> if Exp $15$ (Comandos | Lista_Comandos) [else (Comandos | Lista_Comandos)] 
 
Comando de leitura -> readln "(" id $46$ ")"; 
 
Comando de impressao -> (write | writeln) "(" Exp {,Exp}* ")"; 
 
EXP -> Exp_Soma1 $38$ [(== $39$ | != $40$ | < $41$ | > $42$ | <= $43$ | >= $44$) Exp_Soma2 $45$] 
 
EXP SOMA -> [+|-$32$]  Exp_Mult1 $33$ {(+ $34$| - $35$| or $36$) Exp_Mult2 $37$ }
 
EXP MULT -> Fator1 $31${ (* $25$ | / $26$ | and $27$ | // $28$ | % $29$) Fator2 $30$}
 
FATOR -> id $17$["[" Exp $16$"]"]| constante $20$ | not Fator1 $21$| "(" Exp ")" $22$ | integer "(" Exp $23$ ")" | real "(" Exp $24$ ")"


{1,4,7} - Se entrar Flag_numero = verdadeiro se não Flag_numero = falso
{2} - Se id.tipo = real e Exp.tipo != inteiro e Exp.tipo != real entao ERRO Se id.tipo != Exp.tipo entao ERRO
{3,5,8} - Se (const.tipo == id.tipo e Flag_numero == verdadeiro) entao se (const.tipo == real ou const.tipo == int) senao ERRO
{6,10,11} - Testar unicidade (pesquisar tabela de simbolos pra ver se o id ja esta la) e id.classe == VAZIO senao ERRO
{9} - Se id.classe == classe-const entao ERRO(const nao pode mudar o valor)
{12,16} - se id.tipo != string entao ERRO
{13,16} - se Exp.tipo != inteiro entao ERRO
{15} - Se Exp.tipo != logico entao erro
{16} - Fator.tipo = caracter
{14} - se Exp.tipo != caracter entao ERRO
{17} - Fator.tipo = id.tipo
{20} - Fator.tipo = constante.tipo (pegar o tipo da constante)
{21} - Se Fator1.tipo != logico entao ERRO senao Fator.tipo = logico
{22} - Fator.tipo = Exp.tipo
{23} - Se Exp.tipo != real e Exp.tipo != inteiro entao ERRO senao Fator.tipo = inteiro
{24} - Se Exp.tipo != inteiro e Exp.tipo != real entao ERRO senao Fator.tipo = real
{25} - Multi = verdadeiro
{26} - Divisao_Real = verdadeiro
{27} - And = verdadeiro 
{28} - Divisao_Inteiros = verdadeiro
{29} - Resto - verdadeiro
{30} - Se And = verdadeiro e (Fator1.tipo == logico e Fator2 == logico) entao EXP_MULT.tipo = logico
Se Fator1.tipo == inteiro e Fator2.tipo == inteiro e (Multi == verdadeiro ou Divisao_Inteiros == verdadeiro ou Resto == verdadeiro) entao EXP_MULT.tipo = inteiro 
senao (Se (Fator1.tipo == real ou Fator1.tipo == inteiro) e (Fator2.tipo == real ou Fator1.tipo == inteiro) e (Multi == verdadeiro ou Divisao_Real == verdadeiro) 
entao EXP_MULT.tipo = real senao ERRO)
{31} - ExpMult.tipo = fator1.tipo 
{32} - Se entrar flag_sinal_negativo - verdadeiro se não flag_sinal_negativo = falso
{33} - EXP_SOMA.tipo = Exp_Mult1.tipo
{34} - Soma = verdadeiro
{35} - Subtração = verdadeiro
{36} - OR = verdadeiro
{37} - Se OR = verdadeiro e (Exp_Mult1.tipo == logico e Exp_Mult2 == logico) entao EXP_SOMA.tipo = logico
Senao Exp_Mult1.tipo == inteiro e Exp_Mult2.tipo == inteiro e (Soma == verdadeiro ou Subtracao == verdadeiro) entao EXP_SOMA.tipo = inteiro 
senao (Se (Exp_Mult1.tipo == real ou Exp_Mult1.tipo == inteiro) e (Exp_Mult2.tipo == real ou Exp_Mult2.tipo == inteiro) e (Soma == verdadeiro ou Subtracao == verdadeiro) 
entao EXP_SOMA.tipo = real senao ERRO)
{38} - EXP.tipo = fator1.tipo
{39} - Igual = verdadeiro
{40} - Diferente = verdadeiro
{41} - Menor = verdadeiro
{42} - Maior = verdadeiro
{43} - MenorIgual = verdadeiro
{44} - MaiorIgual = verdadeiro
{45} - Se (Exp_Soma1.tipo == inteiro ou Exp_Soma1.tipo == real) e (Exp_Soma2.tipo == inteiro ou Exp_Soma2.tipo == real) e (Igual == verdadeiro ou Diferente == verdadeiro ou Maior == verdadeiro ou Menor == verdadeiro ou MaiorIgual == verdadeiro ou MenorIgual == verdadeiro) entao EXP_SOMA.tipo = logico
senao se (Exp_Soma1.tipo == caractere) e (Exp_Soma1.tipo == caractere) e (Igual == verdadeiro ou Diferente == verdadeiro ou Maior == verdadeiro ou Menor == verdadeiro ou MaiorIgual == verdadeiro ou MenorIgual == verdadeiro) entao EXP_SOMA.tipo = logico
senao se (Exp_Soma1.tipo == string e Exp_Soma2.tipo == string e (Igual == verdadeiro) entao EXP.tipo = logico)
senao ERRO
{46} - Se id.classe = vazio entao ERRO se id.classe=const entao ERRO